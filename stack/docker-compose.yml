name: stadtbezirksbudget-stack

services:
  postgres:
    image: postgres:17.4-alpine3.21@sha256:7062a2109c4b51f3c792c7ea01e83ed12ef9a980886e3b3d380a7d2e5f6ce3f5
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    ports:
      - "5432:5432"
    healthcheck: &healthcheck
      test: ["CMD-SHELL", "pg_isready -d postgres -U admin"]
      interval: 30s
      timeout: 60s
      retries: 3
      start_period: 60s
    security_opt: &security_settings
      - no-new-privileges:true

  # see https://event-driven.io/en/automatically_connect_pgadmin_to_database/
  pg-admin:
    image: dpage/pgadmin4:9.9.0@sha256:5d9624a93634d1c5e595619cc57b1d330758120d1baf445fa97300c0c1fc3c0a
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "5050:5050"
    depends_on:
      - postgres
    healthcheck:
      <<: *healthcheck
      test: ["CMD", "wget", "-O", "-", "http://localhost:5050/misc/ping"]
    security_opt: *security_settings
    volumes:
      - './pgadmin/servers.json:/pgadmin4/servers.json:ro'
      - './pgadmin/pgpass:/pgadmin4/pgpass'
    user: root # see https://github.com/pgadmin-org/pgadmin4/issues/6257
    entrypoint: /bin/sh -c "chmod 600 /pgadmin4/pgpass; /entrypoint.sh;" # see https://www.postgresql.org/docs/current/libpq-pgpass.html#LIBPQ-PGPASS (last paragraph)

  keycloak:
    image: keycloak/keycloak:26.4.1@sha256:bbb299c7e58a2c61c683dc3439da3e2698e005ca88ba6fd249629311d70250ab
    command:
      - start-dev
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HEALTH_ENABLED=true
      - KC_HTTP_PORT=8100
      - KC_HTTP_RELATIVE_PATH=/auth
    ports:
      - "8100:8100"
    volumes:
      - ./keycloak/plugins:/opt/keycloak/providers/
    networks:
      - keycloak
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then exit 0;else exit 1;fi;"]
    security_opt: *security_settings

  init-keycloak:
    image: klg71/keycloakmigration:0.2.111@sha256:6fd84fd15813062bf2a9bb9492cb0f71d6d0d2b434b8fb68c8e7859a2e7aabfb
    depends_on:
      - keycloak
    environment:
      ADMIN_USER: admin
      ADMIN_PASSWORD: admin
      BASEURL: http://keycloak:8100/auth
      WAIT_FOR_KEYCLOAK: 'true'
      FAIL_ON_UNDEFINED_VARIABLES: 'true'
      KEYCLOAK_CHANGELOG: /migration/keycloak-changelog.yml
    volumes:
      - './keycloak/migration:/migration'
    networks:
      - keycloak
    security_opt: *security_settings

  refarch-gateway:
    image: ghcr.io/it-at-m/refarch/refarch-gateway:1.7.0@sha256:3f82ab83c212ca53c9c2b606cfe29291f21525eac86fece215d0e1c6ca51273f
    depends_on:
      init-keycloak:
        condition: service_completed_successfully
    ports:
      - "8083:8080"
    environment:
      - ALLOWED_ORIGINS_PUBLIC=http://localhost:*
      - ALLOWED_ORIGINS_CLIENTS=http://localhost:*
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_0_ID=sso
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_0_URI=http://keycloak:8100/
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_0_PREDICATES_0=Path=/api/sso/userinfo
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_0_FILTERS_0=RewritePath=/api/sso/userinfo, /auth/realms/local_realm/protocol/openid-connect/userinfo
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_1_ID=backend
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_1_URI=http://host.docker.internal:39146/
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_1_PREDICATES_0=Path=/api/backend-service/**
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_1_FILTERS_0=RewritePath=/api/backend-service/(?<urlsegments>.*), /$\{urlsegments}
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_2_ID=frontend
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_2_URI=http://host.docker.internal:8081/
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_2_PREDICATES_0=Path=/**
      - SPRING_PROFILES_ACTIVE=hazelcast-local
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUERURI=http://keycloak:8100/auth/realms/local_realm
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_SSO_ISSUERURI=$${spring.security.oauth2.resourceserver.jwt.issuer-uri}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_PROVIDER=sso
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTID=local
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTSECRET=client_secret
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_SCOPE=profile, openid, roles
    networks:
      - keycloak
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl http://localhost:8080/actuator/health/liveness"]
    security_opt: *security_settings

  appswitcher-server:
    image: ghcr.io/it-at-m/appswitcher-server:1.3.0@sha256:10006bc0f3093a548cf977dd65b3df56baa8a08e42eb04872e9e51011c9e21f8
    environment:
      - SPRING_WEB_RESOURCES_STATIC_LOCATIONS=file:/workspace/static
      - THC_PATH=/actuator/health/liveness
    ports:
      - "8084:8080"
    volumes:
      - "./appswitcher-server/application.yml:/workspace/config/application.yml"
      - "./appswitcher-server/static:/workspace/static"
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/workspace/health-check"]
    security_opt: *security_settings

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.6@sha256:35ee670b60ebbd5a962ad841da0873d992829c624274d782d9dee1d58a94e588
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - kafka

  kafka:
    image: confluentinc/cp-kafka:7.7.6@sha256:355934e757472d93a6199d7b693416699e09875de9512d15e3a2fe78a805eacf
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:0.7.2@sha256:8f2ff02d64b0a7a2b71b6b3b3148b85f66d00ec20ad40c30bdcd415d46d31818
    ports:
      - "8089:8080"
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - kafka

  init-kafka:
    image: confluentinc/cp-kafka:7.7.6@sha256:355934e757472d93a6199d7b693416699e09875de9512d15e3a2fe78a805eacf
    depends_on:
      - kafka
    entrypoint: ["/bin/bash", "-c"]
    networks:
      - kafka
    command: |
      "      
      # blocks until kafka is reachable
      echo -e 'Currently available topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics...'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic stadtbezirksbudget-cit-backend-local --replication-factor 1 --partitions 1

      echo -e 'Resulting topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

networks:
  keycloak:
  kafka:
